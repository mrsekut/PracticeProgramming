// 1
Z plus Z is Z by P-Zero {}

// 2
Z plus S(S(Z)) is S(S(Z)) by P-Zero {}

// 3
S(S(Z)) plus Z is S(S(Z)) by P-Succ {
    S(Z) plus Z is S(Z) by P-Succ {
        Z plus Z is Z by P-Zero {}
    }
}

// 4
S(Z) plus S(S(S(Z))) is S(S(S(S(Z)))) by P-Succ {
    Z plus S(S(S(Z))) is S(S(S(Z))) by P-Zero {};
}

// 5
Z times S(S(Z)) is Z by T-Zero {}

// 6
S(S(Z)) times Z is Z by T-Succ {
    S(Z) times Z is Z by T-Succ {
        Z times Z is Z by T-Zero {};
        Z plus Z is Z by P-Zero {};
    };
    Z plus Z is Z by P-Zero {};
}

// 7
S(S(Z)) times S(Z) is S(S(Z)) by T-Succ {
    S(Z) times S(Z) is S(Z) by T-Succ {
        Z times S(Z) is Z by T-Zero {};
        S(Z) plus Z is S(Z) by P-Succ {
            Z plus Z is Z by P-Zero {};
        }
    };
    S(Z) plus S(Z) is S(S(Z)) by P-Succ {
        Z plus S(Z) is S(Z) by P-Zero {};
    };
};

// 8
S(S(Z)) times S(S(Z)) is S(S(S(S(Z)))) by T-Succ {
    S(Z) times S(S(Z)) is S(S(Z)) by T-Succ {
        Z times S(S(Z)) is Z by T-Zero {};
        S(S(Z)) plus Z is S(S(Z)) by P-Succ {
            S(Z) plus Z is S(Z) by P-Succ {
                Z plus Z is Z by P-Zero {};
            }
        }
    };
    S(S(Z)) plus S(S(Z)) is S(S(S(S(Z)))) by P-Succ {
        S(Z) plus S(S(Z)) is S(S(S(Z))) by P-Succ {
            Z plus S(S(Z)) is S(S(Z)) by P-Zero {};
        }
    }
};

// 9
S(S(Z)) is less than S(S(S(Z))) by L-Succ {}

// 10
S(S(Z)) is less than S(S(S(Z))) by L-SuccSucc {
    S(Z) is less than S(S(Z)) by L-SuccSucc {
        Z is less than S(Z) by L-Zero {}
    }
}

// 11
S(S(Z)) is less than S(S(S(Z))) by L-Succ {}

// 12
S(S(Z)) is less than S(S(S(S(S(Z))))) by L-Trans {
    S(S(Z)) is less than S(S(S(Z))) by L-Succ {};
    S(S(S(Z))) is less than S(S(S(S(S(Z))))) by L-Trans {
        S(S(S(Z))) is less than S(S(S(S(Z)))) by L-Succ {};
        S(S(S(S(Z)))) is less than S(S(S(S(S(Z))))) by L-Succ {};
    }
}

// 13
S(S(Z)) is less than S(S(S(S(S(Z))))) by L-SuccSucc {
    S(Z) is less than S(S(S(S(Z)))) by L-SuccSucc {
        Z is less than S(S(S(Z))) by L-Zero {};
    }
}

// 14
S(S(Z)) is less than S(S(S(S(S(Z))))) by L-SuccR {
    S(S(Z)) is less than S(S(S(S(Z)))) by L-SuccR {
        S(S(Z)) is less than S(S(S(Z))) by L-Succ {}
    }
}



// 15
Z + S(S(Z)) evalto S(S(Z)) by E-Plus {
    Z evalto Z by E-Const {};
    S(S(Z)) evalto S(S(Z)) by E-Const {};
    Z plus S(S(Z)) is S(S(Z)) by P-Zero {}
}

// 16
S(S(Z)) + Z evalto S(S(Z)) by E-Plus {
    S(S(Z)) evalto S(S(Z)) by E-Const {};
    Z evalto Z by E-Const {};
    S(S(Z)) plus Z is S(S(Z)) by P-Succ {
        S(Z) plus Z is S(Z) by P-Succ {
            Z plus Z is Z by P-Zero {}
        }
    }
}

// 17
S(Z) + S(Z) + S(Z) evalto S(S(S(Z))) by E-Plus {
    S(Z) + S(Z) evalto S(S(Z)) by E-Plus {
        S(Z) evalto S(Z) by E-Const {};
        S(Z) evalto S(Z) by E-Const {};
        S(Z) plus S(Z) is S(S(Z)) by P-Succ {
            Z plus S(Z) is S(Z) by P-Zero {};
        };
    };
    S(Z) evalto S(Z) by E-Const {};
    S(S(Z)) plus S(Z) is S(S(S(Z))) by P-Succ {
        S(Z) plus S(Z) is S(S(Z)) by P-Succ {
            Z plus S(Z) is S(Z) by P-Zero {};
        };
    };
}

// 18
S(S(S(Z))) + S(S(Z)) * S(Z) evalto S(S(S(S(S(Z))))) by E-Plus {
    S(S(S(Z))) evalto S(S(S(Z))) by E-Const {};
    S(S(Z)) * S(Z) evalto S(S(Z)) by E-Times {
        S(S(Z)) evalto S(S(Z)) by E-Const {};
        S(Z) evalto S(Z) by E-Const {};
        S(S(Z)) times S(Z) is S(S(Z)) by T-Succ {
            S(Z) times S(Z) is S(Z) by T-Succ {
                Z times S(Z) is Z by T-Zero {};
                S(Z) plus Z is S(Z) by P-Succ {
                    Z plus Z is Z by P-Zero {};
                };
            };
            S(Z) plus S(Z) is S(S(Z)) by P-Succ {
                Z plus S(Z) is S(Z) by P-Zero {};
            };
        };
    };
    S(S(S(Z))) plus S(S(Z)) is S(S(S(S(S(Z))))) by P-Succ {
        S(S(Z)) plus S(S(Z)) is S(S(S(S(Z)))) by P-Succ {
            S(Z) plus S(S(Z)) is S(S(S(Z))) by P-Succ {
                Z plus S(S(Z)) is S(S(Z)) by P-Zero {};
            };
        };
    };
};

// 19
(S(S(Z)) + S(S(Z))) * Z evalto Z by E-Times {
    S(S(Z)) + S(S(Z)) evalto S(S(S(S(Z)))) by E-Plus {
        S(S(Z)) evalto S(S(Z)) by E-Const {};
        S(S(Z)) evalto S(S(Z)) by E-Const {};
        S(S(Z)) plus S(S(Z)) is S(S(S(S(Z)))) by P-Succ {
            S(Z) plus S(S(Z)) is S(S(S(Z))) by P-Succ {
                Z plus S(S(Z)) is S(S(Z)) by P-Zero {};
            };
        };
    };
    Z evalto Z by E-Const {};
    S(S(S(S(Z)))) times Z is Z by T-Succ {
        S(S(S(Z))) times Z is Z by T-Succ {
            S(S(Z)) times Z is Z by T-Succ {
                S(Z) times Z is Z by T-Succ {
                    Z times Z is Z by T-Zero {};
                    Z plus Z is Z by P-Zero {};
                };
                Z plus Z is Z by P-Zero {};
            };
            Z plus Z is Z by P-Zero {};
        };
        Z plus Z is Z by P-Zero {};
    };
};

// 20
Z * (S(S(Z)) + S(S(Z))) evalto Z by E-Times {
    Z evalto Z by E-Const {};
    S(S(Z)) + S(S(Z)) evalto S(S(S(S(Z)))) by E-Plus {
        S(S(Z)) evalto S(S(Z)) by E-Const {};
        S(S(Z)) evalto S(S(Z)) by E-Const {};
        S(S(Z)) plus S(S(Z)) is S(S(S(S(Z)))) by P-Succ {
            S(Z) plus S(S(Z)) is S(S(S(Z))) by P-Succ {
                Z plus S(S(Z)) is S(S(Z)) by P-Zero {};
            };
        };
    };
    Z times S(S(S(S(Z)))) is Z by T-Zero {};
};

// 21
Z + S(S(Z)) -*-> S(S(Z)) by MR-One {
    Z + S(S(Z)) ---> S(S(Z)) by R-Plus {
        Z plus S(S(Z)) is S(S(Z)) by P-Zero {}
    }
}


// 22
S(Z) * S(Z) + S(Z) * S(Z) -d-> S(Z) + S(Z) * S(Z) by DR-PlusL {
    S(Z) * S(Z) -d-> S(Z) by DR-Times {
        S(Z) times S(Z) is S(Z) by T-Succ {
            Z times S(Z) is Z by T-Zero {};
            S(Z) plus Z is S(Z) by P-Succ {
                Z plus Z is Z by P-Zero {};
            }
        };
    }
}

// 23
S(Z) * S(Z) + S(Z) * S(Z) ---> S(Z) * S(Z) + S(Z) by R-PlusR {
    S(Z) * S(Z) ---> S(Z) by R-Times {
        S(Z) times S(Z) is S(Z) by T-Succ {
            Z times S(Z) is Z by T-Zero {};
            S(Z) plus Z is S(Z) by P-Succ {
                Z plus Z is Z by P-Zero {};
            };
        };
    }
}

// 24
S(Z) * S(Z) + S(Z) * S(Z) -*-> S(S(Z)) by MR-Multi {
    S(Z) * S(Z) + S(Z) * S(Z) -*-> S(Z) + S(Z) by MR-Multi {
        S(Z) * S(Z) + S(Z) * S(Z) -*-> S(Z) + S(Z) * S(Z) by MR-One {
            S(Z) * S(Z) + S(Z) * S(Z) ---> S(Z) + S(Z) * S(Z) by R-PlusL {
                S(Z) * S(Z) ---> S(Z) by R-Times {
                    S(Z) times S(Z) is S(Z) by T-Succ {
                        Z times S(Z) is Z by T-Zero {};
                        S(Z) plus Z is S(Z) by P-Succ {
                            Z plus Z is Z by P-Zero {};
                        };
                    };
                };
            };
        };
        S(Z) + S(Z) * S(Z) -*-> S(Z) + S(Z) by MR-One {
            S(Z) + S(Z) * S(Z) ---> S(Z) + S(Z) by R-PlusR {
                S(Z) * S(Z) ---> S(Z) by R-Times {
                    S(Z) times S(Z) is S(Z) by T-Succ {
                        Z times S(Z) is Z by T-Zero {};
                        S(Z) plus Z is S(Z) by P-Succ {
                            Z plus Z is Z by P-Zero {};
                        };
                    };
                };
            }
        };
    };
    S(Z) + S(Z) -*-> S(S(Z)) by MR-One {
        S(Z) + S(Z) ---> S(S(Z)) by R-Plus {
            S(Z) plus S(Z) is S(S(Z)) by P-Succ {
                Z plus S(Z) is S(Z) by P-Zero {};
            };
        };
    };
};


// 25
3 + 5 evalto 8 by E-Plus {
    3 evalto 3 by E-Int {};
    5 evalto 5 by E-Int {};
    3 plus 5 is 8 by B-Plus {};
};

// 26
8 - 2 - 3 evalto 3 by E-Minus {
    8 - 2 evalto 6 by E-Minus {
        8 evalto 8 by E-Int {};
        2 evalto 2 by E-Int {};
        8 minus 2 is 6 by B-Minus {};
    };
    3 evalto 3 by E-Int {};
    6 minus 3 is 3 by B-Minus {};
};

// 27
(4 + 5) * (1 - 10) evalto -81 by E-Times {
    4 + 5 evalto 9 by E-Plus {
        4 evalto 4 by E-Int {};
        5 evalto 5 by E-Int {};
        4 plus 5 is 9 by B-Plus {};
    };
    1 - 10 evalto -9 by E-Minus {
        1 evalto 1 by E-Int {};
        10 evalto 10 by E-Int {};
        1 minus 10 is -9 by B-Minus {};
    };
    9 times -9 is -81 by B-Times {};
};

// 28
if 4<5 then 2 + 3 else 8 * 8 evalto 5 by E-IfT {
    4 < 5 evalto true by E-Lt {
        4 evalto 4 by E-Int {};
        5 evalto 5 by E-Int {};
        4 less than 5 is true by B-Lt {};
    };
    2 + 3 evalto 5 by E-Plus {
        2 evalto 2 by E-Int {};
        3 evalto 3 by E-Int {};
        2 plus 3 is 5 by B-Plus {};
    };
};

// 29
3 + if -23 < -2 * 8 then 8 else 2 + 4 evalto 11 by E-Plus {
    3 evalto 3 by E-Int {};
    if -23 < -2 * 8 then 8 else 2 + 4 evalto 8 by E-IfT {
        -23 < -2 * 8 evalto true by E-Lt {
            -23 evalto -23 by E-Int {};
            -2 * 8 evalto -16 by E-Times {
                -2 evalto -2 by E-Int {};
                8 evalto 8 by E-Int {};
                -2 times 8 is -16 by B-Times {};
            };
            -23 less than -16 is true by B-Lt {};
        };
        8 evalto 8 by E-Int {};
    };
    3 plus 8 is 11 by B-Plus {};
};

// 30
3 + (if -23 < -2 * 8 then 8 else 2) + 4 evalto 15 by E-Plus {
    3 + (if -23 < -2 * 8 then 8 else 2) evalto 11 by E-Plus {
        3 evalto 3 by E-Int {};
        if -23 < -2*8 then 8 else 2 evalto 8 by E-IfT {
            -23 < -2*8 evalto true by E-Lt {
                -23 evalto -23 by E-Int {};
                -2 * 8 evalto -16 by E-Times {
                    -2 evalto -2 by E-Int {};
                    8 evalto 8 by E-Int {};
                    -2 times 8 is -16 by B-Times {};
                };
                -23 less than -16 is true by B-Lt {};
            };
            8 evalto 8 by E-Int {};
        };
        3 plus 8 is 11 by B-Plus {};
    };
    4 evalto 4 by E-Int {};
    11 plus 4 is 15 by B-Plus {};
};

// 34
x=3, y=2 |- x evalto 3 by E-Var2 {
    x=3 |- x evalto 3 by E-Var1 {};
};

// 35
x=true, y=4 |- if x then y+1 else y-1 evalto 5 by E-IfT {
    x=true, y=4 |- x evalto true by E-Var2 {
        x = true |- x evalto true by E-Var1 {};
    };
    x=true, y=4 |- y+1 evalto 5 by E-Plus {
        x=true, y=4 |- y evalto 4 by E-Var1 {};
        x=true, y=4 |- 1 evalto 1 by E-Int {};
        4 plus 1 is 5 by B-Plus {};
    }
};

// 36
|- let x = 1 + 2 in x * 4 evalto 12 by E-Let {
    |- 1 + 2 evalto 3 by E-Plus {
        |- 1 evalto 1 by E-Int {};
        |- 2 evalto 2 by E-Int {};
        1 plus 2 is 3 by B-Plus {};
    };
    x=3 |- x*4 evalto 12 by E-Times {
        x=3 |- x evalto 3 by E-Var1 {};
        x=3 |- 4 evalto 4 by E-Int {};
        3 times 4 is 12 by B-Times {};
    };
};


// 40
|- fun x -> x + 1 evalto ()[fun x -> x + 1] by E-Fun {};

// 41
 |- let y=2 in fun x -> x + y evalto (y=2)[fun x -> x + y] by E-Let {
    |- 2 evalto 2 by E-Int {};
    y=2 |- fun x->x+y evalto (y=2)[fun x->x+y] by E-Fun {};
};

// 42★
|- let sq = fun x -> x * x in sq 3 + sq 4 evalto 25 by E-Let {
    |- fun x -> x * x evalto ()[fun x -> x * x] by E-Fun {};
    sq=()[fun x->x*x] |- sq 3 + sq 4 evalto 25 by E-Plus {
        sq=()[fun x->x*x] |- sq 3 evalto 9 by E-App {
            sq=()[fun x->x*x] |- sq evalto ()[fun x -> x*x] by E-Var1 {};
            sq=()[fun x->x*x] |- 3 evalto 3 by E-Int {};
            x=3 |- x * x evalto 9 by E-Times {
                x=3 |- x evalto 3 by E-Var1 {};
                x=3 |- x evalto 3 by E-Var1 {};
                3 times 3 is 9 by B-Times {};
            }
        };
        sq=()[fun x->x*x] |- sq 4 evalto 16 by E-App {
            sq=()[fun x->x*x] |- sq evalto ()[fun x -> x*x] by E-Var1 {};
            sq=()[fun x->x*x] |- 4 evalto 4 by E-Int {};
            x=4 |- x * x evalto 16 by E-Times {
                x=4 |- x evalto 4 by E-Var1 {};
                x=4 |- x evalto 4 by E-Var1 {};
                4 times 4 is 16 by B-Times {};
            }
        };
        9 plus 16 is 25 by B-Plus {};
    };
};

// 43
|- let sm = fun f -> f 3 + f 4 in sm (fun x -> x * x) evalto 25 by E-Let {
    |- fun f -> f 3 + f 4 evalto ()[fun f -> f 3 + f 4] by E-Fun {};
    sm = ()[fun f -> f 3 + f 4] |- sm (fun x -> x * x) evalto 25 by E-App {
        sm = ()[fun f -> f 3 + f 4] |- sm evalto ()[fun f -> f 3 + f 4] by E-Var1 {};
        sm = ()[fun f -> f 3 + f 4] |- fun x -> x * x evalto (sm = ()[fun f -> f 3 + f 4])[fun x -> x * x] by E-Fun {};
        f = (sm = ()[fun f -> f 3 + f 4])[fun x -> x * x] |- f 3 + f 4 evalto 25 by E-Plus {
            f = (sm = ()[fun f -> f 3 + f 4])[fun x -> x * x] |- f 3 evalto 9 by E-App {
                f = (sm = ()[fun f -> f 3 + f 4])[fun x -> x * x] |- f evalto (sm = ()[fun f -> f 3 + f 4])[fun x -> x * x] by E-Var1 {};
                f = (sm = ()[fun f -> f 3 + f 4])[fun x -> x * x] |- 3 evalto 3 by E-Int {};
                sm = ()[fun f -> f 3 + f 4], x = 3 |- x * x evalto 9 by E-Times {
                    sm = ()[fun f -> f 3 + f 4], x = 3 |- x evalto 3 by E-Var1 {};
                    sm = ()[fun f -> f 3 + f 4], x = 3 |- x evalto 3 by E-Var1 {};
                    3 times 3 is 9 by B-Times {};
                };
            };
            f = (sm = ()[fun f -> f 3 + f 4])[fun x -> x * x] |- f 4 evalto 16 by E-App {
                f = (sm = ()[fun f -> f 3 + f 4])[fun x -> x * x] |- f evalto (sm = ()[fun f -> f 3 + f 4])[fun x -> x * x] by E-Var1 {};
                f = (sm = ()[fun f -> f 3 + f 4])[fun x -> x * x] |- 4 evalto 4 by E-Int {};
                sm = ()[fun f -> f 3 + f 4], x = 4 |- x * x evalto 16 by E-Times {
                    sm = ()[fun f -> f 3 + f 4], x = 4 |- x evalto 4 by E-Var1 {};
                    sm = ()[fun f -> f 3 + f 4], x = 4 |- x evalto 4 by E-Var1 {};
                    4 times 4 is 16 by B-Times {};
                };
            };
            9 plus 16 is 25 by B-Plus {};
        };
    };
};

// 44
|- let max = fun x -> fun y -> if x < y then y else x in max 3 5 evalto 5 by E-Let {
    |- fun x -> fun y -> if x < y then y else x evalto ()[fun x -> fun y -> if x < y then y else x] by E-Fun {};
    max = ()[fun x -> fun y -> if x < y then y else x] |- max 3 5 evalto 5 by E-App {
        max = ()[fun x -> fun y -> if x < y then y else x] |- max 3 evalto (x=3)[fun y -> if x<y then y else x] by E-App {
            max = ()[fun x -> fun y -> if x < y then y else x] |- max evalto ()[fun x-> fun y -> if x<y then y else x] by E-Var1 {};
            max = ()[fun x -> fun y -> if x < y then y else x] |- 3 evalto 3 by E-Int {};
            x=3 |- fun y -> if x<y then y else x evalto (x=3)[fun y -> if x<y then y else x] by E-Fun {};
        };
        max = ()[fun x -> fun y -> if x < y then y else x] |- 5 evalto 5 by E-Int {};
        x=3,y=5 |- if x<y then y else x evalto 5 by E-IfT {
            x=3,y=5 |- x<y evalto true by E-Lt {
                x=3,y=5 |- x evalto 3 by E-Var2 {
                    x=3 |- x evalto 3 by E-Var1 {};
                };
                x=3,y=5 |- y evalto 5 by E-Var1 {};
                3 less than 5 is true by B-Lt {};
            };
            x=3,y=5 |- y evalto 5 by E-Var1 {};
        };
    };
};

// 70
|- (1 + 2) :: (3 + 4) :: [] evalto 3 :: 7 :: [] by E-Cons {
    |- 1 + 2 evalto 3 by E-Plus {
        |- 1 evalto 1 by E-Int {};
        |- 2 evalto 2 by E-Int {};
        1 plus 2 is 3 by B-Plus {};
    };
    |- (3+4) :: [] evalto 7 :: [] by E-Cons {
        |- 3 + 4 evalto 7 by E-Plus {
            |- 3 evalto 3 by E-Int {};
            |- 4 evalto 4 by E-Int {};
            3 plus 4 is 7 by B-Plus {};
        };
        |- [] evalto [] by E-Nil {};
    };
};

// 71
|- let f = fun x -> match x with [] -> 0 | a :: b -> a in f (4::[]) + f [] + f (1 :: 2 :: 3 :: []) evalto 5 by E-Let {
    |- fun x -> match x with [] -> 0 | a :: b -> a evalto ()[fun x -> match x with [] -> 0 | a :: b -> a] by E-Fun {};
    f=()[fun x -> match x with [] -> 0 | a :: b -> a] |- f (4::[]) + f [] + f (1::2::3::[]) evalto 5 by E-Plus {
        f=()[fun x -> match x with [] -> 0 | a :: b -> a] |- f (4::[]) + f [] evalto 4 by E-Plus {
            f=()[fun x -> match x with [] -> 0 | a :: b -> a] |- f (4::[]) evalto 4 by E-App {
                f=()[fun x -> match x with [] -> 0 | a :: b -> a] |- f evalto ()[fun x -> match x with [] -> 0 | a :: b -> a] by E-Var {};
                f=()[fun x -> match x with [] -> 0 | a :: b -> a] |- 4::[] evalto 4::[] by E-Cons {
                    f=()[fun x -> match x with [] -> 0 | a :: b -> a] |- 4 evalto 4 by E-Int {};
                    f=()[fun x -> match x with [] -> 0 | a :: b -> a] |- [] evalto [] by E-Nil {};
                };
                x=4::[] |- match x with [] -> 0 | a::b -> a evalto 4 by E-MatchCons {
                    x=4::[] |- x evalto 4::[] by E-Var {};
                    x=4::[], a=4, b=[] |- a evalto 4 by E-Var {};
                };
            };
            f=()[fun x -> match x with [] -> 0 | a :: b -> a] |- f [] evalto 0 by E-App {
                f=()[fun x -> match x with [] -> 0 | a :: b -> a] |- f evalto ()[fun x -> match x with [] -> 0 | a :: b -> a] by E-Var {};
                f=()[fun x -> match x with [] -> 0 | a :: b -> a] |- [] evalto [] by E-Nil {};
                x=[] |- match x with [] -> 0 | a::b->a evalto 0 by E-MatchNil {
                    x=[] |- x evalto [] by E-Var {};
                    x=[] |- 0 evalto 0 by E-Int {};
                };
            };
            4 plus 0 is 4 by B-Plus {};
        };
        f=()[fun x -> match x with [] -> 0 | a :: b -> a] |- f (1::2::3::[]) evalto 1 by E-App {
            f=()[fun x -> match x with [] -> 0 | a :: b -> a] |- f evalto ()[fun x -> match x with [] -> 0 | a :: b -> a] by E-Var {};
            f=()[fun x -> match x with [] -> 0 | a :: b -> a]  |- 1::2::3::[] evalto 1::2::3::[] by E-Cons {
                f=()[fun x -> match x with [] -> 0 | a :: b -> a]  |- 1 evalto 1 by E-Int {};
                f=()[fun x -> match x with [] -> 0 | a :: b -> a]  |- 2::3::[] evalto 2::3::[] by E-Cons {
                    f=()[fun x -> match x with [] -> 0 | a :: b -> a]  |- 2 evalto 2 by E-Int {};
                    f=()[fun x -> match x with [] -> 0 | a :: b -> a]  |- 3 :: [] evalto 3 :: [] by E-Cons {
                        f=()[fun x -> match x with [] -> 0 | a :: b -> a] |- 3 evalto 3 by E-Int {};
                        f=()[fun x -> match x with [] -> 0 | a :: b -> a] |- [] evalto [] by E-Nil {};
                    };
                };
            };
            x=1::2::3::[] |- match x with [] -> 0 | a::b->a evalto 1 by E-MatchCons {
                x=1::2::3::[] |- x evalto 1::2::3::[] by E-Var {};
                x=1::2::3::[], a=1, b=2::3::[] |- a evalto 1 by E-Var {};
            };
        };
        4 plus 1 is 5 by B-Plus {};
    }
}

// 73
|- let rec f = fun x -> if x < 1 then [] else x :: f (x - 1) in f 3 evalto 3 :: 2 :: 1 :: [] by E-LetRec {
    f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)] |- f 3 evalto 3 :: 2 :: 1 :: [] by E-AppRec {
        f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)] |- f evalto ()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)] by E-Var {};
        f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)] |- 3 evalto 3 by E-Int {};
        f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 3 |- if x < 1 then [] else x :: f (x - 1) evalto 3 :: 2 :: 1 :: [] by E-IfF {
            f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 3 |- x < 1 evalto false by E-Lt {
                f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 3 |- x evalto 3 by E-Var {};
                f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 3 |- 1 evalto 1 by E-Int {};
                3 less than 1 is false by B-Lt {}
            };
            f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 3 |- x :: f (x - 1) evalto 3 :: 2 :: 1 :: [] by E-Cons {
                f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 3 |- x evalto 3 by E-Var {};
                f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 3 |- f (x - 1) evalto 2 :: 1 :: [] by E-AppRec {
                    f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 3 |- f evalto ()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)] by E-Var {};
                    f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 3 |- x - 1 evalto 2 by E-Minus {
                        f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 3 |- x evalto 3 by E-Var {};
                        f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 3 |- 1 evalto 1 by E-Int {};
                        3 minus 1 is 2 by B-Minus {}
                    };
                    f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 2 |- if x < 1 then [] else x :: f (x - 1) evalto 2 :: 1 :: [] by E-IfF {
                        f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 2 |- x < 1 evalto false by E-Lt {
                            f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 2 |- x evalto 2 by E-Var {};
                            f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 2 |- 1 evalto 1 by E-Int {};
                            2 less than 1 is false by B-Lt {}
                        };
                        f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 2 |- x :: f (x - 1) evalto 2 :: 1 :: [] by E-Cons {
                            f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 2 |- x evalto 2 by E-Var {};
                            f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 2 |- f (x - 1) evalto 1 :: [] by E-AppRec {
                                f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 2 |- f evalto ()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)] by E-Var {};
                                f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 2 |- x - 1 evalto 1 by E-Minus {
                                    f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 2 |- x evalto 2 by E-Var {};
                                    f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 2 |- 1 evalto 1 by E-Int {};
                                    2 minus 1 is 1 by B-Minus {}
                                };
                                f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 1 |- if x < 1 then [] else x :: f (x - 1) evalto 1 :: [] by E-IfF {
                                    f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 1 |- x < 1 evalto false by E-Lt {
                                        f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 1 |- x evalto 1 by E-Var {};
                                        f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 1 |- 1 evalto 1 by E-Int {};
                                        1 less than 1 is false by B-Lt {}
                                    };
                                    f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 1 |- x :: f (x - 1) evalto 1 :: [] by E-Cons {
                                        f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 1 |- x evalto 1 by E-Var {};
                                        f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 1 |- f (x - 1) evalto [] by E-AppRec {
                                            f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 1 |- f evalto ()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)] by E-Var {};
                                            f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 1 |- x - 1 evalto 0 by E-Minus {
                                                f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 1 |- x evalto 1 by E-Var {};
                                                f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 1 |- 1 evalto 1 by E-Int {};
                                                1 minus 1 is 0 by B-Minus {}
                                            };
                                            f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 0 |- if x < 1 then [] else x :: f (x - 1) evalto [] by E-IfT {
                                                f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 0 |- x < 1 evalto true by E-Lt {
                                                    f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 0 |- x evalto 0 by E-Var {};
                                                    f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 0 |- 1 evalto 1 by E-Int {};
                                                    0 is less than 1 by B-Lt {}
                                                };
                                                f=()[rec f = fun x -> if x < 1 then [] else x :: f (x - 1)], x = 0 |- [] evalto [] by E-Nil {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

// 80
|- 3 + 5: int by T-Plus {
    |- 3: int by T-Int {};
    |- 5: int by T-Int {};
};

// 81
|- if 4<5 then 2+3 else 8*8: int by T-If {
    |- 4 < 5: bool by T-Lt {
        |- 4: int by T-Int {};
        |- 5: int by T-Int {};
    };
    |- 2 + 3: int by T-Plus {
       |- 2: int by T-Int {};
       |- 3: int by T-Int {};
    };
    |- 8 * 8: int by T-Times {
        |- 8: int by T-Int {};
        |- 8: int by T-Int {};
    };
};

// 82
x:bool, y:int |- if x then y+1 else y-1: int by T-If {
    x:bool, y:int |- x: bool by T-Var {};
    x:bool, y:int |- y + 1: int by T-Plus {
        x:bool, y:int |- y: int by T-Var {};
        x:bool, y:int |- 1: int by T-Int {};
    };
    x:bool, y:int |- y - 1: int by T-Minus {
        x:bool, y:int |- y: int by T-Var {};
        x:bool, y:int |- 1: int by T-Int {};
    };
};

// 83
|- let x = 3<2 in let y = 5 in if x then y else 2: int by T-Let {
    |- 3 < 2: bool by T-Lt {
        |- 3: int by T-Int {};
        |- 2: int by T-Int {};
    };
    x:bool |- let y = 5 in if x then y else 2: int by T-Let {
        x:bool |- 5: int by T-Int {};
        x:bool, y:int |- if x then y else 2: int by T-If {
            x:bool, y:int |- x: bool by T-Var {};
            x:bool, y:int |- y: int by T-Var {};
            x:bool, y:int |- 2: int by T-Int {};
        };
    };
};

// 84
|-fun x -> x+1: int -> int by T-Fun {
    x:int |- x + 1: int by T-Plus {
        x:int |- x: int by T-Var {};
        x:int |- 1: int by T-Int {};
    };
};

// 85
|- let f = fun x-> x+1 in f 4: int by T-Let {
    |-fun x -> x+1: int -> int by T-Fun {
        x:int |- x+1: int by T-Plus {
            x:int |- x: int by T-Var {};
            x:int |- 1: int by T-Int {};
        }
    };
    f:int->int |-f 4: int by T-App {
        f:int->int |- f: int -> int by T-Var {};
        f:int->int |- 4: int by T-Int {};
    };
};

// 86
 |-fun f -> f 0 + f 1: (int -> int) -> int by T-Fun {
    f:int->int |- f 0 + f 1: int by T-Plus {
        f:int->int |-f 0: int by T-App {
            f:int->int |- f: int -> int by T-Var {};
            f:int->int |- 0: int by T-Int {};
        };
        f:int->int |-f 1: int by T-App {
            f:int->int |- f: int -> int by T-Var {};
            f:int->int |- 1: int by T-Int {};
        };
    };
};