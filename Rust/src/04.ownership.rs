// ========================
// 所有権(Ownership)
// ========================

// ムーブ(move)
// ========================

// - Rustでは所有権の移動のことをムーブという
// 以下のようなときにムーブされる
// - 変数をアサインする(let x = y)ときや、
// - 関数に引数を値渡しするとき
fn eat_box(boxed_int: Box<i32>) {
    println!("Destroying bbox that contains {}", boxed_int);
}

// 借用(borrowing)
// ========================

// - 所有権を移動せずに変数を出力するだけなら借用で済む
// - 借用を行うためには引数のデータ型宣言の先頭に`&`をつけ、
// 値そのもの(T)ではなく、そのリファレンス(&T)を渡す
fn borrow_box(borrowed_int: &i32) {
    println!("this int is: {}", borrowed_int);
}

// ミュータビリティ

// - &mut T: ミュータブルな借用
//      - ミュータブルな参照
//      - 読み込み・書き込みの権限を借用者に与える
let mutable_borrow = &mut borrowed; // あってる？

// - &T:
//      - イミュータブルな参照
//      - 借用者は読み込みはできるが書き込みはできない
let immutable_borrow = &borrowed; // あってる？

// 借用メンバ
struct Person<'a> {
    name: &'a str,
    occupation: &'a str
}

//  ライフタイム
// ========================

// ライフタイムパラメータ
'a

// 予約後のライフタイムパラメータ
// これの指し示すデータのライフタイムがプログラムの実行開始から終了までの全期間であることを示す
'static